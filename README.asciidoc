IMPORTANT: This repository is no longer updated. Please head over to https://github.com/neo4j-contrib/boltkit instead.

= How to Build a Neo4j Bolt Protocol Driver

This guide will show you how to build a client driver for Neo4j's new remoting protocol, Bolt, from scratch.
The example code here is written in Python but the same principles should apply for any language.
The only requirements for a driver project are raw socket capabilities so most languages should need no external library support.

The `neo4j.py` file in this repository provides a command line Cypher client as a demonstration.
It can be used to run one or more Cypher statements, returning the results in tab-separated format:

[source, bash]
----
$ python neo4j.py "CREATE (a:Person {name:'Alice'})-[ab:KNOWS]->(b:Person {name:'Bob'}) RETURN a, b"
a	b
<Node identity='node/20' labels={'Person'} properties={'name': 'Alice'}>	<Node identity='node/21' labels={'Person'} properties={'name': 'Bob'}>
----

For debugging purposes, the `-v` or `-vv` option flags can also be provided to increase verbosity:

[source, bash]
----
$ python neo4j.py -vv "CREATE (a:Person {name:'Alice'}) RETURN a"
2015-06-11 12:48:57,074  ~~ [CONNECT] localhost 7687
2015-06-11 12:48:57,076  C: [HANDSHAKE] [1, 0, 0, 0]
2015-06-11 12:48:57,076  C: b'\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
2015-06-11 12:48:57,076  S: b'\x00\x00\x00\x01'
2015-06-11 12:48:57,076  S: [HANDSHAKE] 1
2015-06-11 12:48:57,077  C: INIT 'ExampleDriver/1.0'
2015-06-11 12:48:57,077  C: b'\x00\x15\xb1\x01\xd0\x11ExampleDriver/1.0\x00\x00'
2015-06-11 12:48:57,077  S: b'\x00\x03' (3B)
2015-06-11 12:48:57,077  S: b'\xb1p\xa0'
2015-06-11 12:48:57,077  S: b'\x00\x00' (0B)
2015-06-11 12:48:57,077  S: SUCCESS {}
2015-06-11 12:48:57,077  C: RUN "CREATE (a:Person {name:'Alice'}) RETURN a" {}
2015-06-11 12:48:57,077  C: PULL_ALL
2015-06-11 12:48:57,078  C: b"\x00.\xb2\x10\xd0)CREATE (a:Person {name:'Alice'}) RETURN a\xa0\x00\x00\x00\x02\xb0?\x00\x00"
2015-06-11 12:48:57,095  S: b'\x00\r' (13B)
2015-06-11 12:48:57,095  S: b'\xb1p\xa1\x86fields\x91\x81a'
2015-06-11 12:48:57,095  S: b'\x00\x00' (0B)
2015-06-11 12:48:57,095  S: SUCCESS ['a']
2015-06-11 12:48:57,095  S: b'\x00!' (33B)
2015-06-11 12:48:57,095  S: b'\xb1q\x91\xb3N\x87node/17\x91\x86Person\xa1\x84name\x85Alice'
2015-06-11 12:48:57,095  S: b'\x00\x00' (0B)
2015-06-11 12:48:57,095  S: RECORD [(b'N', ('node/17', ['Person'], {'name': 'Alice'}))]
2015-06-11 12:48:57,096  S: b'\x00\x03' (3B)
2015-06-11 12:48:57,096  S: b'\xb1p\xa0'
2015-06-11 12:48:57,096  S: b'\x00\x00' (0B)
2015-06-11 12:48:57,096  S: SUCCESS {}
a
<Node identity='node/17' labels={'Person'} properties={'name': 'Alice'}>

2015-06-11 12:48:57,096  ~~ [CLOSE]
----

For testing purposes, a couple of other command line flags are available.
Statements can be run multiple times with the `-x` option; in conjunction with the `-q` option to suppress output, this can be used to analyse performance:

[source, bash]
----
$ time python neo4j.py -qx 10000 "RETURN 1"

real    0m1.730s
user    0m1.168s
sys     0m0.136s
----


== 0. Downloading the server

Alpha releases of Neo4j 3.0 can be found at http://alpha.neotechnology.com.s3-website-eu-west-1.amazonaws.com/.
These contain a version of Bolt that listens by default on port 7687.


== 1. Connecting and performing a handshake

NOTE: All protocol values are sent and received in big-endian order unless otherwise noted.

Starting with version 1, each release of Bolt is assigned a unique, integral version number.
This number and the associated specification refers to every aspect of the protocol except for the handshake, which is unversioned.
Driver authors should note that subsequent protocol versions are likely to be incompatible and with the exception of the handshake, there is no guarantee that any transport or serialisation code can be shared across versions.

The handshake is used to determine which version of Bolt should be used for that session.
This takes the form of an exchange of protocol version numbers, each represented as a 32-bit unsigned integer.
Firstly, the client sends exactly four possible version numbers in order of preference, using zeroes to pad if necessary.
In return, the server responds with its selection.
If no agreement can be made, the server responds with zero and closes the connection.

In the example below, the client offers protocol version 1 only:

----
Client: 00:00:00:01 00:00:00:00 00:00:00:00 00:00:00:00
----

The server then responds agreeably with version 1 as its selection:

----
Server: 00:00:00:01
----

The following code demonstrates how this exchange can be carried out:

[source,python]
----
def connect(host, port):
    """ Connect and perform a handshake in order to return a valid
    Connection object if a protocol version can be agreed.
    """

    # Establish a connection to the host and port specified
    log.info("Creating connection to %s on port %d" % (host, port))
    s = create_connection((host, port))

    # Send details of the protocol versions supported
    supported_versions = [1, 0, 0, 0]
    log.info("Supported protocol versions are: %r" % supported_versions)
    data = b"".join(struct.pack(">I", version) for version in supported_versions)
    log.debug("Sending handshake data: %r" % data)
    s.sendall(data)

    # Handle the handshake response
    data = s.recv(4)
    log.debug("Received handshake data: %r" % data)
    agreed_version, = struct.unpack(">I", data)
    if agreed_version == 0:
        log.warning("Closing connection as no protocol version could be agreed")
        s.shutdown(SHUT_RDWR)
        s.close()
    else:
        log.info("Protocol version %d agreed" % agreed_version)
        return ConnectionV1(s)
----


== 2. Initialising the session

Each session must first be initialised by sending an INIT message to the server containing a user agent string.
If successful, a SUCCESS message will be returned.

[source,python]
----
class ConnectionV1(object):
    """ Server connection through which all protocol messages
    are sent and received. This class is designed for protocol
    version 1.
    """

    def __init__(self, s):
        self.socket = s
        log.info("Bolt V1 connection established!")
        self.init("ExampleDriver/1.0")

    def init(self, user_agent):
        """ Initialise a connection with a user agent string.
        """
        log.info("Initialising connection")
        self._send((INIT, (user_agent,)))

        signature, (data,) = self._recv()
        if signature == SUCCESS:
            log.info("Initialisation successful")
        else:
            raise ProtocolError("INIT was unsuccessful: %r" % data)
----


=== 2.1. Sending a request

Each message sent and received is serialised as a structure and transmitted in chunks for efficiency.
A zero-length chunk is used to signal the end of a message.

[source,python]
----
    def _send_messages(self, *messages):
        """ Send one or more messages to the server.
        """
        raw = ChunkWriter()
        packer = Packer(raw)

        for message in messages:
            packer.pack(message)
            raw.flush(zero_chunk=True)

        data = raw.to_bytes()
        log.debug("Sending request data: %r" % data)
        self.socket.sendall(data)

        raw.close()
----


=== 2.2. Packing messages as bytes

Bolt uses a custom serialisation format, called link:packstream.py[PackStream].
This is based heavily on http://msgpack.org/[MessagePack] but can model any Cypher data type though its _structure_ mechanism.
Structures are also used to represent messages, with each carrying a signature byte that denotes type.
The INIT message is structured as follows:

image::images/init.png[]


=== 2.3. Splitting into chunks

On the wire, messages are split into chunks for efficient sending and receiving of data.
Each chunk consists of a two-byte header containing the amount of data in bytes followed by the bytes themselves.
A zero-length chunk signifies the end of a message:

image::images/chunked-init.png[]

This chunking can be achieved by a writer that prepends the appropriate headers to each block of data:

[source,python]
----
class ChunkWriter(object):
    """ Writer for chunked data.
    """

    max_chunk_size = 65535

    def __init__(self):
        self.raw = BytesIO()
        self.output_buffer = []
        self.output_size = 0

    def write(self, b):
        """ Write some bytes, splitting into chunks if necessary.
        """
        max_chunk_size = self.max_chunk_size
        output_buffer = self.output_buffer
        while b:
            size = len(b)
            future_size = self.output_size + size
            if future_size >= max_chunk_size:
                end = max_chunk_size - self.output_size
                output_buffer.append(b[:end])
                self.output_size = max_chunk_size
                b = b[end:]
                self.flush()
            else:
                output_buffer.append(b)
                self.output_size = future_size
                b = b""

    def flush(self, zero_chunk=False):
        """ Flush everything written since the last chunk to the
        stream, followed by a zero-chunk if required.
        """
        output_buffer = self.output_buffer
        if output_buffer:
            lines = [struct.pack(">H", self.output_size)] + output_buffer
        else:
            lines = []
        if zero_chunk:
            lines.append(b"\x00\x00")
        if lines:
            self.raw.writelines(lines)
            self.raw.flush()
            del output_buffer[:]
            self.output_size = 0

    def to_bytes(self):
        """ Extract the written data as bytes.
        """
        return self.raw.getvalue()

    def close(self, zero_chunk=False):
        """ Close the stream.
        """
        self.flush(zero_chunk=zero_chunk)
        self.raw.close()
----


=== 2.4. Receiving a response (in chunks)

To read a chunked response, simply alternate between reading the two-byte header and the variable length chunk data.
When a `00 00` chunk header is encountered, the chunks for that message can be concatenated and unpacked.

[source,python]
----
    def _recv(self, size):
        """ Receive a required number of bytes from the network.
        """
        socket = self.socket

        # Try to read the required amount of data
        data = socket.recv(size)
        size -= len(data)

        # If more is needed, keep reading until all data has been received
        while size:
            # Check for available network data
            ready_to_read, _, _ = select((socket,), (), (), 0)
            while not ready_to_read:
                ready_to_read, _, _ = select((socket,), (), (), 0)

            # Read up to the required amount remaining
            b = socket.recv(size)
            size -= len(b)
            data += b

        return data

    def _recv_message(self):
        """ Receive exactly one message from the server.
        """
        raw = BytesIO()
        unpack = Unpacker(raw).unpack

        # Receive chunks of data until chunk_size == 0
        more = True
        while more:
            # Receive chunk header to establish size of chunk that follows
            chunk_header = self._recv(2)
            log.debug("Received chunk header data: %r" % chunk_header)
            chunk_size, = struct.unpack_from(">H", chunk_header)

            # Receive chunk data
            if chunk_size > 0:
                chunk_data = self._recv(chunk_size)
                log.debug("Received chunk data: %r" % chunk_data)
                raw.write(chunk_data)
            else:
                more = False

        # Unpack the message structure from the raw byte stream
        # (there should be only one)
        raw.seek(0)
        signature, fields = next(unpack())
        raw.close()

        # Acknowledge any failures immediately
        if signature == FAILURE:
            self.ack_failure()

        return signature, fields
----

NOTE: Depending on your language of implementation, there are some workarounds that may need to be employed when working with sockets.
In the code above, the http://pubs.opengroup.org/onlinepubs/9699919799/functions/select.html[select] API is used to perform repeated reads until the required amount of data has been received.
Without this, the non-blocking `recv` method may return an empty value if called before any data has been received.


=== 2.5. Unpacking messages from bytes

Once a full message has been received, it must be unpacked from raw bytes into a PackStream structure.
Each message structure contains a signature byte and a set of fields that correspond to the message type.

The table below shows all response messages that may be sent by the server:

[cols="^10,<30,<50,^10",options="header"]
|===
| Signature | Message | Description | Type

| `0x70`
| SUCCESS <metadata>
| Mark a successful exchange
| summary

| `0x71`
| RECORD <values>
| Deliver a single record
| detail

| `0x7E`
| IGNORED <metadata>
| Mark an ignored exchange due to a previous unacknowledged failure
| summary

| `0x7F`
| FAILURE <metadata>
| Mark a failed exchange
| summary
|===

Each request message sent will result in a single summary message in response.
For initialisation, this will be either a SUCCESS or a FAILURE message; other message types may be returned for subsequent exchanges.


== 3. Running a Cypher statement

Running a Cypher statement requires sending a pair of messages: `RUN` and `PULL_ALL`.
`RUN` is used to start the Cypher execution but it is non-blocking so returns immediately with `SUCCESS` or `FAILURE`.
When successful, the response contains a list of fields in the `SUCCESS` metadata that describe the structure of the upcoming records.
`RUN` will fail if, for example, there is a syntax error in the statement.

The second message, `PULL_ALL`, requests that all result items are streamed back to the client.
This generates a response of zero or more `RECORD` messages followed by a trailing `SUCCESS` or `FAILURE` message.
Each `RECORD` contains a set of values that can be paired with the fields from the `RUN` response to build a record map.
The sequence below illustrates a typical exchange where three records are returned:

----
Client: RUN "MATCH (a:Person) RETURN a.name AS name, a.age AS age" {}
Client: PULL_ALL
Server: SUCCESS {"fields": ["name", "age"]}
Server: RECORD ["Alice", 33]
Server: RECORD ["Bob", 44]
Server: RECORD ["Carol", 55]
Server: SUCCESS {}
----

The code below shows the full `run` method from the example driver:

[source,python]
----
    def run(self, statement, parameters):
        """ Run a parameterised Cypher statement.
        """

        # Ensure the statement is a Unicode value
        if isinstance(statement, bytes):
            statement = statement.decode("UTF-8")

        log.info("Running statement %r with parameters %r" % (statement, parameters))
        self._send((RUN, (statement, parameters)),
                   (PULL_ALL, ()))

        signature, (data,) = self._recv()
        if signature == SUCCESS:
            fields = tuple(data["fields"])
            log.info("Statement ran successfully with field list %r" % (fields,))
        else:
            raise CypherError(data)

        records = []
        more = True
        while more:
            signature, (data,) = self._recv()
            if signature == RECORD:
                log.info("Record received with value list %r" % data)
                records.append(tuple(map(hydrated, data)))
            elif signature == SUCCESS:
                log.info("All records successfully received: %r" % data)
                more = False
            else:
                raise CypherError(data)

        return fields, records
----


== 4. Acknowledging failure

When a `FAILURE` response is returned by the server, all subsequent requests will be `IGNORED` until the client has acknowledged the failure.
This can be achieved by sending an `ACK_FAILURE` message which should result in a `SUCCESS` response and resumption of normal service.
If an `ACK_FAILURE` is sent but there is no outstanding failure to acknowledge, a `FAILURE` will be returned instead.

The example driver acknowledges all `FAILURE` messages as soon as they are received through the `ack_failure` method:

[source,python]
----
    def ack_failure(self):
        """ Send an acknowledgement for a previous failure.
        """
        log.info("Acknowledging failure")
        self._send_messages((ACK_FAILURE, ()))

        # Skip any ignored responses
        signature, _ = self._recv_message()
        while signature == IGNORED:
            signature, _ = self._recv_message()

        # Check the acknowledgement was successful
        if signature == SUCCESS:
            log.info("Acknowledgement successful")
        else:
            raise ProtocolError("ACK_FAILURE was unsuccessful")
----

This method skips any outstanding `IGNORED` responses from previous requests before checking for `SUCCESS`.
